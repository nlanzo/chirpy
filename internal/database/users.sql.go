// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password_hash)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, password_hash, is_chirpy_red
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, password_hash, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, password_hash, is_chirpy_red FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.email, users.password_hash, users.is_chirpy_red FROM users
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = $1
AND refresh_tokens.expires_at > NOW()
AND refresh_tokens.revoked_at IS NULL
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, password_hash = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, email, created_at, updated_at, is_chirpy_red
`

type UpdateUserParams struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
}

type UpdateUserRow struct {
	ID          uuid.UUID
	Email       string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.PasswordHash)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsChirpyRed,
	)
	return i, err
}

const userAddChirpyRed = `-- name: UserAddChirpyRed :one
UPDATE users
SET is_chirpy_red = TRUE
WHERE id = $1
RETURNING id, is_chirpy_red
`

type UserAddChirpyRedRow struct {
	ID          uuid.UUID
	IsChirpyRed bool
}

func (q *Queries) UserAddChirpyRed(ctx context.Context, id uuid.UUID) (UserAddChirpyRedRow, error) {
	row := q.db.QueryRowContext(ctx, userAddChirpyRed, id)
	var i UserAddChirpyRedRow
	err := row.Scan(&i.ID, &i.IsChirpyRed)
	return i, err
}

const userRemoveChirpyRed = `-- name: UserRemoveChirpyRed :one
UPDATE users
SET is_chirpy_red = FALSE
WHERE id = $1
RETURNING id, is_chirpy_red
`

type UserRemoveChirpyRedRow struct {
	ID          uuid.UUID
	IsChirpyRed bool
}

func (q *Queries) UserRemoveChirpyRed(ctx context.Context, id uuid.UUID) (UserRemoveChirpyRedRow, error) {
	row := q.db.QueryRowContext(ctx, userRemoveChirpyRed, id)
	var i UserRemoveChirpyRedRow
	err := row.Scan(&i.ID, &i.IsChirpyRed)
	return i, err
}
